{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"editwl DS(i) documentation/specs Welcome to the editwl DS(i) wiki! This wiki covers specifications of widely used DS file formats and more.","title":"Home"},{"location":"#editwl-dsi-documentationspecs","text":"Welcome to the editwl DS(i) wiki! This wiki covers specifications of widely used DS file formats and more.","title":"editwl DS(i) documentation/specs"},{"location":"editwl/fmt/bmg-xml/","text":"Custom BMG-XML format editwl uses a custom XML specification to convert BMG message files from/to readable and editable messages. Description This is a simple BMG XML example: <!DOCTYPE xml> <bmg encoding=\"UTF-16\"> <message>Hello there!</message> <message>This format <escape data=\"ff 00\"/>rules<escape data=\"ff 01\"/>! BMG supremacy</message> </bmg> The XML file starts with a root bmg element which contains a encoding field. Do not confuse this encoding with the usual XML encoding, since this field contains the encoding which will be followed when converting it to a BMG binary. Possible values are utf-16 , utf-8 , shift jis and cp-1252 (uppercase/lowercase and/or without the middle hyphens). BMGs may make use of the file ID value, which can be specified as an optional id field containing a decimal integer. This value is treated as 0 otherwise. All children inside are message elements, whose contents will be plain text or escape sequences, represented by an escape element containing binary hex values in a data field. Keep in mind that tab/indenting is encoded within the message, thus forcing multiline messages to be like the second message in the example. For BMGs containing extra attributes or message IDs, these are represented as optional message fields: <!DOCTYPE xml> <bmg encoding=\"UTF-16\"> <message id=\"0\" attributes=\"00 11 22\">Hello there!</message> <message id=\"12\" attributes=\"AA BB CC\">This format <escape data=\"ff 00\"/>rules<escape data=\"ff 01\"/>! BMG supremacy</message> </bmg> If message IDs are used, all messages must have an ID field. Same thing applies separately for attributes, where all attribute data must be the same size for all messages.","title":"Custom BMG-XML format"},{"location":"editwl/fmt/bmg-xml/#custom-bmg-xml-format","text":"editwl uses a custom XML specification to convert BMG message files from/to readable and editable messages.","title":"Custom BMG-XML format"},{"location":"editwl/fmt/bmg-xml/#description","text":"This is a simple BMG XML example: <!DOCTYPE xml> <bmg encoding=\"UTF-16\"> <message>Hello there!</message> <message>This format <escape data=\"ff 00\"/>rules<escape data=\"ff 01\"/>! BMG supremacy</message> </bmg> The XML file starts with a root bmg element which contains a encoding field. Do not confuse this encoding with the usual XML encoding, since this field contains the encoding which will be followed when converting it to a BMG binary. Possible values are utf-16 , utf-8 , shift jis and cp-1252 (uppercase/lowercase and/or without the middle hyphens). BMGs may make use of the file ID value, which can be specified as an optional id field containing a decimal integer. This value is treated as 0 otherwise. All children inside are message elements, whose contents will be plain text or escape sequences, represented by an escape element containing binary hex values in a data field. Keep in mind that tab/indenting is encoded within the message, thus forcing multiline messages to be like the second message in the example. For BMGs containing extra attributes or message IDs, these are represented as optional message fields: <!DOCTYPE xml> <bmg encoding=\"UTF-16\"> <message id=\"0\" attributes=\"00 11 22\">Hello there!</message> <message id=\"12\" attributes=\"AA BB CC\">This format <escape data=\"ff 00\"/>rules<escape data=\"ff 01\"/>! BMG supremacy</message> </bmg> If message IDs are used, all messages must have an ID field. Same thing applies separately for attributes, where all attribute data must be the same size for all messages.","title":"Description"},{"location":"fmt/bmg/","text":"BMG format BMG (likely standing for \"binary message\"/\"basic message\") is a format used by several DS games (although only in first-party Nintendo games?). Note: the format is also used in Wii games (and apparently GameCube as well), here only the format found in DS games is described. Check here for more Wii-related details of the format. BMG format INF1 section Message entry DAT1 section Message data Escape sequences MID1 section BMGs start like usual DS formats, containing a slightly different common header : Offset Size Description 0x00 0x08 Magic (0x31676D624753454D = \"MESGbmg1\") 0x08 0x04 Total file size 0x0C 0x04 Section count 0x10 0x01 Text encoding (CP-1252 = 1, UTF-16 = 2, Shift JIS = 3, UTF-8 = 4) 0x11 0x1 Unknown (usually zero) 0x12 0x2 Unknown (usually zero) 0x14 0x4 Unknown (usually zero) 0x18 0x4 Unknown (usually zero) 0x1C 0x4 Unknown (usually zero) All BMG files seem to have INF1 and DAT1 sections, optionally having a MID1 section (thus section count is 2 or higher). The header is followed by the following sections (in order, in case they are present): INF1 section This section starts with a common header and has the following structure: Offset Size Description 0x00 0x04 Block magic (0x31464E49 = \"INF1\") 0x04 0x04 Total block size 0x08 0x02 Message count 0x0A 0x02 Message entry size 0x0C 0x04 File ID 0x10 Message count * Message entry size Message entries Message entry Message entries have the following structure: Offset Size Description 0x00 0x04 Message data offset 0x04 Message entry size - 0x04 Additional attributes The message data offset is an offset relative to past DAT1 section header (thus relative to the start of the section data). In general games have no additional attributes in messages, hence message entries typically only contain the message data offset. This section has (always?) end zero-byte padding to be 0x20-aligned. DAT1 section This section starts with a common header and has the following structure: Offset Size Description 0x00 0x04 Block magic (0x31544144 = \"DAT1\") 0x04 0x04 Total block size 0x08 Variable Message data This section also has (always?) end zero-byte padding to be 0x20-aligned. Message data Message content has two kinds of possible data: plain text and escape sequences used to encode binary data. Escape sequences (at least for UTF-8 and UTF-16, unknown for the others) have the following structure: Offset Size Description 0x00 Character size (1 = UTF-8, 2 = UTF-16, etc) Escape character '\\u001A' Character size 0x01 Total sequence size Character size + 0x01 Total sequence size - Character size - 0x01 Encoded bytes Every character read outside of escape sequences is treated as plain message text. These are read until a null character is found, which indicates the end of the message data. For example, message data 41 00 41 00 1A 00 06 12 34 56 53 00 53 00 00 00 corresponds to an UTF-16 message with: plain text \"AA\", escape with bytes 12 34 56 , plain text \"BB\" (finishing with the corresponding null character). Escape sequences Escape sequences are used for special text formatting. Common use cases are changing text color, formatting in-game strings... Sequences differ between encodings: sequence formats in UTF-8 and UTF-16 BMG files MID1 section This section starts with a common header and has the following structure: Offset Size Description 0x00 0x04 Block magic (0x3144494D = \"MID1\") 0x04 0x04 Total block size 0x08 0x02 Message ID count 0x0A 0x01 Unknown 0x0B 0x01 Unknown 0x0C 0x04 Unknown 0x10 0x04 * Message ID count Message IDs This section also has (always?) end zero-byte padding to be 0x20-aligned. The message ID count is the same as the message count in the previous INF1 section. IDs are apparently used in games with multiple BMG files, where the same message is present in several BMG files, where the ID is probably used to access the message (since the message is probably in different indexes in the data section).","title":"BMG format"},{"location":"fmt/bmg/#bmg-format","text":"BMG (likely standing for \"binary message\"/\"basic message\") is a format used by several DS games (although only in first-party Nintendo games?). Note: the format is also used in Wii games (and apparently GameCube as well), here only the format found in DS games is described. Check here for more Wii-related details of the format. BMG format INF1 section Message entry DAT1 section Message data Escape sequences MID1 section BMGs start like usual DS formats, containing a slightly different common header : Offset Size Description 0x00 0x08 Magic (0x31676D624753454D = \"MESGbmg1\") 0x08 0x04 Total file size 0x0C 0x04 Section count 0x10 0x01 Text encoding (CP-1252 = 1, UTF-16 = 2, Shift JIS = 3, UTF-8 = 4) 0x11 0x1 Unknown (usually zero) 0x12 0x2 Unknown (usually zero) 0x14 0x4 Unknown (usually zero) 0x18 0x4 Unknown (usually zero) 0x1C 0x4 Unknown (usually zero) All BMG files seem to have INF1 and DAT1 sections, optionally having a MID1 section (thus section count is 2 or higher). The header is followed by the following sections (in order, in case they are present):","title":"BMG format"},{"location":"fmt/bmg/#inf1-section","text":"This section starts with a common header and has the following structure: Offset Size Description 0x00 0x04 Block magic (0x31464E49 = \"INF1\") 0x04 0x04 Total block size 0x08 0x02 Message count 0x0A 0x02 Message entry size 0x0C 0x04 File ID 0x10 Message count * Message entry size Message entries","title":"INF1 section"},{"location":"fmt/bmg/#message-entry","text":"Message entries have the following structure: Offset Size Description 0x00 0x04 Message data offset 0x04 Message entry size - 0x04 Additional attributes The message data offset is an offset relative to past DAT1 section header (thus relative to the start of the section data). In general games have no additional attributes in messages, hence message entries typically only contain the message data offset. This section has (always?) end zero-byte padding to be 0x20-aligned.","title":"Message entry"},{"location":"fmt/bmg/#dat1-section","text":"This section starts with a common header and has the following structure: Offset Size Description 0x00 0x04 Block magic (0x31544144 = \"DAT1\") 0x04 0x04 Total block size 0x08 Variable Message data This section also has (always?) end zero-byte padding to be 0x20-aligned.","title":"DAT1 section"},{"location":"fmt/bmg/#message-data","text":"Message content has two kinds of possible data: plain text and escape sequences used to encode binary data. Escape sequences (at least for UTF-8 and UTF-16, unknown for the others) have the following structure: Offset Size Description 0x00 Character size (1 = UTF-8, 2 = UTF-16, etc) Escape character '\\u001A' Character size 0x01 Total sequence size Character size + 0x01 Total sequence size - Character size - 0x01 Encoded bytes Every character read outside of escape sequences is treated as plain message text. These are read until a null character is found, which indicates the end of the message data. For example, message data 41 00 41 00 1A 00 06 12 34 56 53 00 53 00 00 00 corresponds to an UTF-16 message with: plain text \"AA\", escape with bytes 12 34 56 , plain text \"BB\" (finishing with the corresponding null character).","title":"Message data"},{"location":"fmt/bmg/#escape-sequences","text":"Escape sequences are used for special text formatting. Common use cases are changing text color, formatting in-game strings... Sequences differ between encodings: sequence formats in UTF-8 and UTF-16 BMG files","title":"Escape sequences"},{"location":"fmt/bmg/#mid1-section","text":"This section starts with a common header and has the following structure: Offset Size Description 0x00 0x04 Block magic (0x3144494D = \"MID1\") 0x04 0x04 Total block size 0x08 0x02 Message ID count 0x0A 0x01 Unknown 0x0B 0x01 Unknown 0x0C 0x04 Unknown 0x10 0x04 * Message ID count Message IDs This section also has (always?) end zero-byte padding to be 0x20-aligned. The message ID count is the same as the message count in the previous INF1 section. IDs are apparently used in games with multiple BMG files, where the same message is present in several BMG files, where the ID is probably used to access the message (since the message is probably in different indexes in the data section).","title":"MID1 section"},{"location":"fmt/common/","text":"Common formats This page covers common file structures/sections used by several documented DS file formats. Common file header Many file formats start with the following header structure: Offset Size Description 0x00 0x04 File magic 0x04 0x02 Byte order 0x06 0x02 Version 0x08 0x04 Total file size 0x0C 0x02 This header size (0x10) 0x0E 0x02 Section count Common section header Many formats contain sections starting with the following header structure: Offset Size Description 0x00 0x04 Block magic 0x04 0x04 Total block size Games typically make use of a dedicated function for finding a given block. This function will keep iterating through the existing blocks of the file data, until a block is found whose magic matches the desired block magic.","title":"Common format structure"},{"location":"fmt/common/#common-formats","text":"This page covers common file structures/sections used by several documented DS file formats.","title":"Common formats"},{"location":"fmt/common/#common-file-header","text":"Many file formats start with the following header structure: Offset Size Description 0x00 0x04 File magic 0x04 0x02 Byte order 0x06 0x02 Version 0x08 0x04 Total file size 0x0C 0x02 This header size (0x10) 0x0E 0x02 Section count","title":"Common file header"},{"location":"fmt/common/#common-section-header","text":"Many formats contain sections starting with the following header structure: Offset Size Description 0x00 0x04 Block magic 0x04 0x04 Total block size Games typically make use of a dedicated function for finding a given block. This function will keep iterating through the existing blocks of the file data, until a block is found whose magic matches the desired block magic.","title":"Common section header"}]}